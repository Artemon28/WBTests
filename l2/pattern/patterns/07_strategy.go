package patterns

import (
	"fmt"
	"time"
)

/*
	Реализовать паттерн «Посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
*/

/*
Паттерн применяется, когда есть несколько алгоритмов, которые выполняют одну задачу разными способами

Если есть несколько похожих классов, отличающихся поведением, мы можем вынести их в один класс, а поведения реализовать
через различные стратегии


Можно заменить множество ифов в алгоритме на различные стратегии
*/

/*
Плюсы:
1) Алгоритмы вынесены отдельно от объектов
2) Возможность быстро изменить или добавить алгоритм
3) Улучшение модульности и тестируемости
*/

/*
минусы:
1) Доп классы
2) Необходимость знать как работает каждая стратегия и какую нужно выбрать
*/

/*
пример на практике
1) Различные способы авторизации на сайте
2) Способы посчитать коэффициенты эффективности работы, использующие различные данные и методы для этого
3) Высчитывание маршрута для разных способов добраться (пешком, на машине, велосипед, общественный транспорт)
*/

/*
Например, у нас есть большая структура и мы хотим записывать её или в БД или в JSON/XML или ещё в какой-гибудь файл
тогда для каждой записи будет своя стратегия
*/

type WriteRec interface {
	write(r *Records)
}

type WriteJSON struct{}

func (j *WriteJSON) write(r *Records) {
	fmt.Println("Создаёт и Записывает в JSON")
}

type WriteXML struct{}

func (j *WriteXML) write(r *Records) {
	fmt.Println("Создаёт и Записывает в XML")
}

type WriteDB struct{}

func (j *WriteDB) write(r *Records) {
	fmt.Println("Создаёт и Записывает в DB")
}

type Records struct {
	name     string
	surname  string
	order    string
	id       int
	birthday time.Time

	WriteWay WriteRec
}

func (r *Records) write() {
	r.WriteWay.write(r)
}
